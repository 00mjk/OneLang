simple_expression:
  tmpl: 'BEFORE {{expr}} AFTER'
  model: { expr: 42 }
  expected: 'BEFORE 42 AFTER'
property_access:
  tmpl: 'BEFORE {{obj.field}} AFTER'
  model: { obj: { field: 43 } }
  expected: 'BEFORE 43 AFTER'
multiline1:
  tmpl: |-
    line1
      line2
    line3
  expected: 'line1\n  line2\nline3'
expr1:
  tmpl: 'A {{ 4 * 5 / 2 + 1 }} B'
  expected: 'A 11 B'
simple_if_true:
  tmpl: 'A {{if condition}}true{{/if}} B'
  model: { condition: true }
  expected: 'A true B'
simple_if_else:
  tmpl: 'A {{if condition}}true{{else}}false{{/if}} B'
  model: { condition: false }
  expected: 'A false B'
simple_if_not:
  tmpl: 'A {{if !condition}}true{{else}}false{{/if}} B'
  model: { condition: false }
  expected: 'A true B'
foreach:
  tmpl: |-
    {{for item in array|sep=,}}
      {{item.name}}
    {{/for}}
  model:
    array:
      - name: item1
      - name: item2
      - name: item3
  expected: 'item1,item2,item3'
complex:
  tmpl: |-
    L0
    L1A {{ 42 }} L1B
    L2A {{if cond1}}true{{/if}} L2B
    L3A {{if cond2}}true{{else}}false{{/if}} L3B
    L4A {{if cond1}}true{{/if}} L4B {{ 12 }} L4C
    L5
    {{for item in array}}
      L6A {{item.name}} L6B
      {{if item.cond1}}
        L7 COND1 TRUE
      {{elif item.cond2}}
        L7 COND2 TRUE
        {{if item.cond3}}
          L8 COND3 TRUE
            L8 plus indent
          L8 indent back
        {{/if}}
      {{else}}
        L7 FALSE
      {{/if}}
    {{else}}
      FOR ELSE
    {{/for}}
    L9
    {{for item in array|sep=,}}
      {{item.name}}
    {{/for}}
    L10
    {{if cond1}}
      L11 COND1
    {{/if}}
    {{if cond2}}
      L12 COND2
    {{/if}}
    L13
  model:
    cond1: true
    cond2: false
    array:
      - { name: item1, cond1: false, cond2: true, cond3: true }
      - { name: item2, cond1: true, cond2: true, cond3: false }
      - { name: item3, cond1: true, cond2: false, cond3: false }
      - { name: item4, cond1: false, cond2: false, cond3: false }
  expected: |-
    L0
    L1A 42 L1B
    L2A true L2B
    L3A false L3B
    L4A true L4B 12 L4C
    L5
    L6A item1 L6B
    L7 COND2 TRUE
    L8 COND3 TRUE
      L8 plus indent
    L8 indent back
    L6A item2 L6B
    L7 COND1 TRUE
    L6A item3 L6B
    L7 COND1 TRUE
    L6A item4 L6B
    L7 FALSE
    L9
    item1,item2,item3,item4
    L10
    L11 COND1
    L13
csharp_template_str:
  tmpl: |-
    $"
    {{for part in parts|inline}}
      {{if part.literal}}
        {{part.text}}
      {{else}}
        {{if part.isBoolean}}
          {(({{part.expr}}) ? "true" : "false")}
        {{else}}
          {{{part.expr}}}
        {{/if}}
      {{/if}}
    {{/for}}
    "
  expected: '$"hello_{((a == 5) ? "true" : "false")}_and_{str}_bello"'
  model:
    parts:
      - { literal: true, text: hello_ }
      - { isBoolean: true, expr: "a == 5", literal: false }
      - { literal: true, text: _and_ }
      - { expr: "str", literal: false, isBoolean: false }
      - { literal: true, text: _bello }
empty_for:
  tmpl: |-
    A
    {{for item in items}}
      BAD
    {{/for}}
    B
  expected: "A\nB"
  model: { items: [] }
inline_if_true:
  tmpl: |-
    A
    {{if cond}}B{{/if}}
    C
  expected: "A\nB\nC"
  model: { cond: true }
inline_if_false:
  tmpl: |-
    A
    {{if cond}}B{{/if}}
    C
  expected: "A\nC"
  model: { cond: false }
python_template_str:
  tmpl: |-
    "
    {{for part in parts|inline}}
      {{if part.literal}}
        {{part.text}}
      {{else}}
        %s
      {{/if}}
    {{/for}}
    " % (
    {{for part in parts|inline sep=", "}}
      {{if part.expr}}
        {{if part.isBoolean}}
          "true" if {{part.expr}} else "false"
        {{else}}
          {{part.expr}}
        {{/if}}
      {{/if}}
    {{/for}}
    )
  expected: '"hello_%s_and_%s_bello" % ("true" if a == 5 else "false", str)'
  model:
    parts:
      - { literal: true, text: hello_, expr: null }
      - { isBoolean: true, expr: "a == 5", literal: false }
      - { literal: true, text: _and_, expr: null }
      - { expr: "str", literal: false, isBoolean: false }
      - { literal: true, text: _bello, expr: null }
control_indent:
  tmpl: |-
    LINE1
      {{if cond}}
          LINE2-INDENT4
            LINE3-INDENT6
      {{/if}}
        {{if cond}}
          LINE4-INDENT4
            LINE5-INDENT6
        {{/if}}
    LINE6
  expected: |-
    LINE1
        LINE2-INDENT4
          LINE3-INDENT6
        LINE4-INDENT4
          LINE5-INDENT6
    LINE6
  model: { cond: true }
call_test:
  tmpl: |-
    {{main()}}(
      {{for item in array|inline sep=", "}}
        {{genItem(item)}}
      {{/for}}
    )
  methods:
    genItem(item): |-
      {{item.name}}: {{item.type}}
    main: |-
      main
  model:
    array:
      - { name: arg1, type: number }
      - { name: arg2, type: string }
  expected: 'main(arg1: number, arg2: string)'
call_indent:
  tmpl: |-
    LINE1
        {{multiLine()}}
  methods:
    multiLine: |-
      LINE2
      LINE3
  expected: |-
    LINE1
        LINE2
        LINE3
python_complex_if:
  tmpl: |-
    BEGIN
    {{if(expr)}}
    END
  methods:
    if(expr): |-
      if {{expr.cond}}:
          {{expr.then}}
      {{if expr.else}}
        {{if hasKey(expr.else, "cond")}}
          el{{if(expr.else)}}
        {{else}}
          else:
              {{expr.else}}
        {{/if}}
      {{/if}}
  model:
    expr:
      cond: COND1
      then: COND1_BODY
      else:
        cond: ELIF_COND
        then: ELIF_BODY
        else: ELSE_BODY
  expected: |-
    BEGIN
    if COND1:
        COND1_BODY
    elif ELIF_COND:
        ELIF_BODY
    else:
        ELSE_BODY
    END
cpp_complex_if:
  tmpl: |-
    BEGIN
    method() {
      {{if(expr)}}
    }
    END
  methods:
    if(expr): |-
      if ({{expr.cond}}) {
          {{expr.then}}
      }
      {{if expr.else|inline}}
        {{" "}}
        {{if hasKey(expr.else, "cond")|inline}}
          else {{if(expr.else)|inline}}
        {{else}}
          else {
              {{expr.else}}
          }
        {{/if}}
      {{/if}}
  model:
    expr:
      cond: COND1
      then: COND1_BODY
      else:
        cond: ELIF_COND
        then: ELIF_BODY
        else: ELSE_BODY
  expected: |-
    BEGIN
    method() {
      if (COND1) {
          COND1_BODY
      } else if (ELIF_COND) {
          ELIF_BODY
      } else {
          ELSE_BODY
      }
    }
    END
body_test:
  tmpl: |-
    function test() {
        {{genBody()}}
        if (condition) {
            {{genBody()}}
        }
    }
  methods:
    genBody: |-
      statement1;
      statement2;
  expected: |-
    function test() {
        statement1;
        statement2;
        if (condition) {
            statement1;
            statement2;
        }
    }
multiline_inline_if:
  tmpl: |-
    YamlIndent
      BEGIN3 {{if true}}{{"L1\nL2"}}{{/if}} END3
  expected: |-
    YamlIndent
      BEGIN3 L1
      L2 END3
if_position_indent:
  tmpl: |-
    YamlIndent
      BEGIN4
      {{if true}}
        {{"L1\nL2"}}
      {{/if}}
      END4
  expected: |-
    YamlIndent
      BEGIN4
      L1
      L2
      END4
multiline_test:
  tmpl: |-
    BEGIN1 {{"L1\nL2"}} END1

      BEGIN2 {{"L1\nL2"}} END2
    
      BEGIN3 {{if true}}{{"L1\nL2"}}{{/if}} END3

      BEGIN4
      {{if true}}
        {{"L1\nL2"}}
      {{/if}}
      END4
    
      BEGIN5
        {{"L1\nL2"}}
      END5
    
      BEGIN6 {{if false}}{{"L1\nL2"}}{{else}}ELSE{{/if}} END6
  expected: |-
    BEGIN1 L1
    L2 END1

      BEGIN2 L1
      L2 END2

      BEGIN3 L1
      L2 END3

      BEGIN4
      L1
      L2
      END4
    
      BEGIN5
        L1
        L2
      END5
    
      BEGIN6 ELSE END6
perl_bug:
  tmpl: |-
    ( x
    {{if false|inline}}x{{/if}}
     )
  expected: '( x )'
perl_bug_2:
  tmpl: |-
    ( x
    {{if false|inline}}
      x
    {{/if}}
     )
  expected: '( x )'
perl_bug_3:
  tmpl: |-
    LINE
      ( x
      {{if false|inline}}
        , x
      {{/if}}
       )
  expected: 'LINE\n  ( x )'
ruby_attr:
  tmpl: |-
    class << self
      attr_accessor 
      {{for item in items|inline sep=", "}}
        :{{item}}
      {{/for}}
    end
  model: { items: ['a','b','c'] }
  expected: |-
    class << self
      attr_accessor :a, :b, :c
    end
glue_disappears_1:
  tmpl: |-
    BEGIN
    {{if false}}X{{/if}}

    {{if false}}Y{{/if}}
    END
  expected: |-
    BEGIN
    END
glue_disappears_2:
  tmpl: |-
    BEGIN
    {{if false}}X{{/if}}

    {{if true}}Y{{/if}}
    END
  expected: |-
    BEGIN
    Y
    END
glue_disappears_3:
  tmpl: |-
    BEGIN
    {{if true}}X{{/if}}

    {{if false}}Y{{/if}}
    END
  expected: |-
    BEGIN
    X
    END
glue_stays:
  tmpl: |-
    BEGIN
    {{if true}}X{{/if}}

    {{if true}}Y{{/if}}
    END
  expected: |-
    BEGIN
    X

    Y
    END
php_begin:
  tmpl: |-
    <?php

    {{for inc in includes|sep=\n}}
      require_once("{{inc}}");
    {{/for}}
    
    {{"END"}}
  model: { includes: [] }
  expected: |-
    <?php

    END
cpp_public_private:
  tmpl: |-
    public:
      {{if false}}{{/if}}

      {{if false}}{{/if}}

    private:
  expected: |-
    public:
    private:
at_least_one:
  tmpl: |-
    {{if true}}A{{/if}}

    {{if false}}{{/if}}

    {{if true}}B{{/if}}
  expected: "A\n\nB"