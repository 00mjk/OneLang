expressions:
  TsArray.length: '$this.${isArray(this) ? "length" : "size()"}'
  TsArray.includes(value): ${toStream(this)}.anyMatch($value::equals)
  TsArray.set(key, value): '${isArray(this) ? `$this[$key] = $value` : `$this.set($key, $value)`}'
  TsArray.get(key): '${isArray(this) ? `$this[$key]` : `$this.get($key)`}'
  TsArray.pop(): $this.remove($this.size() - 1)
  TsArray.filter(predicate): ${toStream(this)}.filter($predicate).${toArray(type)}
  TsArray.every(predicate):
    includes: [io.onelang.std.core.StdArrayHelper]
    template: StdArrayHelper.allMatch($this, $predicate)
  TsArray.some(predicate): ${toStream(this)}.anyMatch($predicate)
  TsArray.concat(other):
    includes: [java.util.stream.Stream]
    template: Stream.of($this, $other).flatMap(Stream::of).${toArray(type)}
  TsArray.join(separator):
    includes: [java.util.stream.Collectors]
    template: ${toStream(this)}.collect(Collectors.joining($separator))
  TsArray.map(selector): ${toStream(this)}.map($selector).${toArray(type)}
  TsArray.push(item): $this.add($item)
  TsArray.shift(): $this.remove(0)
  TsArray.find(predicate): ${toStream(this)}.filter($predicate).findFirst().orElse(null)
  TsArray.sort():
    includes: [java.util.Collections]
    template: Collections.sort($this)
  TsString.length: $this.length()
  TsString.charCodeAt(idx): (int)$this.charAt($idx)
  TsString.includes(substr): $this.contains($substr)
  TsString.get(idx): $this.substring($idx, $idx + 1)
  TsString.substr(start): $this.substring($start)
  TsString.substr(start, length): $this.substring($start, $start + $length)
  TsString.substring(start, end): $this.substring($start, $end)
  TsString.split(pattern): $this.split(${escape(pattern)}, -1)
  TsString.replace(pattern, replacement):
    if: pattern.type.name == "RegExp"
    includes: [java.util.regex.Pattern]
    template: $this.replaceAll(${escape(pattern)}, ${escapeRepl(replacement)})
  TsString.replace(what, replacement):
    if: pattern.type.name == "TsString"
    template: $this.replace($what, $replacement)
  Map.set(key, value): $this.put($key, $value)
  Map.get(key): $this.get($key)
  Map.hasKey(key): $this.containsKey($key)
  Map.has(key): $this.containsKey($key)
  Map.delete(key): $this.remove($key)
  Map.values(): $this.values().${toArray(type, 1)}
  TsMap.set(key, value): $this.put($key, $value)
  TsMap.get(key): $this.get($key)
  TsMap.hasKey(key): $this.containsKey($key)
  TsMap.has(key): $this.containsKey($key)
  TsMap.delete(key): $this.remove($key)
  TsMap.values(): $this.values().${toArray(type, 1)}
  Object.keys(map): $map.keySet().toArray(String[]::new)
  Object.values(map): $map.values().${toArray(type)}
  Set.values(): $this.${toArray(type)}
  Set.has(item): $this.contains($item)
  Set.add(item): $this.add($item)
  Array.from(items): $items
  Promise.resolve(value): $value
  RegExpExecArray.get(idx): $this[$idx]
  RegExpExecArray.length: $this.length
  Map.size: $this.size()
  parseInt(str): Integer.parseInt($str)
  new RegExp(pattern, modifiers):
    includes: [io.onelang.std.core.RegExp]
    template: new RegExp($pattern, $modifiers)
  One.langName(): '"Java"'
  Error.message:
    includes: [io.onelang.std.core.ExceptionHelper]
    template: ExceptionHelper.toString($this)