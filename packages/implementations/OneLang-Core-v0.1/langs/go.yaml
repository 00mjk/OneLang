implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: go
    implementation:
      classes:
        OneString:
          type: string
          fields:
            length: "len({{self}})"
          methods:
            substring: "{{self}}[{{start}}:{{end}}]"
            split: 
              #includes: [strings]
              template: "strings.Split({{self}}, {{separator}})"
            get: "{{self}}[{{idx}}]"
            substrMatch: "{{self}}[{{offset}}:{{offset}} + len({{str}})] == {{str}}"
            replace:
              includes: [strings]
              template: "strings.Replace({{self}}, {{from}}, {{to}}, -1)"
        OneNumber:
          type: int
        OneBoolean:
          type: bool
        OneArray:
          type: "[]{{typeArgs[0]}}"
          fields:
            length: "len({{self}})"
          methods:
            add: "{{self}} = append({{self}}, {{item}})"
            get: "{{self}}[{{index}}]"
            set: "{{self}}[{{index}}] = {{value}}"
        OneMap:
          methods:
            keys:
              extraArgs: [result]
              template: |-
                {{result}} := make([]{{typeArgs[0]}}, 0, len({{self}}))
                for  key, _ := range {{self}} {
                  {{result}} = append({{result}}, key)
                }
            values:
              extraArgs: [result]
              template: |-
                {{result}} := make([]{{typeArgs[1]}}, 0, len({{self}}))
                for  _, value := range {{self}} {
                  {{result}} = append({{result}}, value)
                }
            remove: "delete({{self}}, {{key}})"
            hasKey:
              extraArgs: [result]
              template: "_, {{result}} := {{self}}[{{key}}]"
            get: "{{self}}[{{key}}]"
            set: "{{self}}[{{key}}] = {{value}}"
        OneError:
          methods:
            raise: panic({{message}})
        One:
          methods:
            langName: '"Go"'
      operators:
        OneString + OneNumber:
          includes: [strconv]
          template: "{{left}} + strconv.Itoa({{right}})"
        OneString + OneBoolean:
          includes: [strconv]
          template: "{{left}} + strconv.FormatBool({{right}})"
        OneString += OneCharacter:
          template: "{{left}} += string({{right}})"
      expressions:
        arrayLiteral: "[]{{getType(expr.valueType.typeArguments[0])}}{{{genParams(expr.items)}}}"
        mapLiteral: |- 
          map[{{expr.typeArgs[0]}}]{{expr.typeArgs[1]}}{
            {{for prop in expr.properties|sep="\n"}}
              "{{prop.name}}": {{gen(prop.initializer)}},
            {{/for}}
          }
