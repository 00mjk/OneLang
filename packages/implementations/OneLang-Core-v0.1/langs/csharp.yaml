implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: csharp
    implementation:
      classes:
        OneString:
          type: string
          fields:
            length: "{{self}}.Length"
          methods:
            substring: "{{self}}.Substring({{start}}, {{end}} - {{start}})"
            split:
              includes: ["System"]
              template: "{{self}}.Split(new[]{ {{separator}} }, StringSplitOptions.None)"
            get: "{{self}}[{{idx}}]"
            replace: "{{self}}.Replace({{from}}, {{to}})"
            substrMatch: "String.Compare({{self}}, {{offset}}, {{str}}, 0, ({{str}}).Length) == 0"
        OneNumber:
          type: int
        OneBoolean:
          type: bool
        OneArray:
          type: "List<{{typeArgs[0]}}>"
          includes: [System.Collections.Generic]
          fields:
            length: "{{self}}.Count"
          methods:
            add:  "{{self}}.Add({{item}})"
            get:  "{{self}}[{{index}}]"
            set:  "{{self}}[{{index}}] = {{value}}"
        OneMap:
          includes: [System.Linq]
          methods:
            keys:  "{{self}}.Keys.ToArray()"
            values:  "{{self}}.Values.ToArray()"
            remove:  "{{self}}.Remove({{key}})"
            hasKey:  "{{self}}.ContainsKey({{key}})"
            get:  "{{self}}[{{key}}]"
            set:  "{{self}}[{{key}}] = {{value}}"
        OneError:
          includes: [System]
          methods:
            raise: throw new Exception({{message}})
        One:
          methods:
            langName: '"C#"'
      operators:
        OneString + OneBoolean:
          template: '{{left}} + ({{right}} ? "true" : "false")'
      expressions:
        arrayLiteral:
          includes: [System.Collections.Generic]
          template: "new List<{{expr.typeArgs[0]}}> { {{genParams(expr.items)}} }"
        mapLiteral:
          includes: [System.Collections.Generic]
          template: |- 
            new Dictionary<{{expr.typeArgs[0]}}, {{expr.typeArgs[1]}}>
            {
                {{for prop in expr.properties|sep=",\n"}}
                  { "{{prop.name}}", {{gen(prop.initializer)}} }
                {{/for}}
            }
