implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: ruby
    implementation:
      classes:
        OneString:
          fields:
            length: "{{self}}.length"
          methods:
            substring: "{{self}}[{{start}}...{{end}}]"
            split: "{{self}}.split({{separator}})"
            get: "{{self}}[{{idx}}]"
            replace: "{{self}}.gsub(/#{Regexp.escape({{from}})}/, {{to}})"
            substrMatch: "{{self}}[{{offset}}...{{offset}} + {{str}}.length] == {{str}}"
        OneArray:
          fields:
            length: "{{self}}.length"
          methods:
            add: "{{self}} << {{genWithParen(item)}}"
            get: "{{self}}[{{index}}]"
            set: "{{self}}[{{index}}] = {{value}}"
        OneMap:
          methods:
            keys: "{{self}}.keys"
            values: "{{self}}.values"
            remove: "{{self}}.delete({{key}})"
            hasKey: "{{self}}.has_key?({{key}})"
            get: "{{self}}[{{key}}]"
            set: "{{self}}[{{key}}] = {{value}}"
        OneError:
          methods:
            raise: raise {{message}}
        One:
          methods:
            langName: '"Ruby"'
      operators:
        OneString + OneNumber: "{{left}} + {{genWithParen(right)}}.to_s"
        OneString + OneBoolean: "{{left}} + {{genWithParen(right)}}.to_s"
      expressions:
        arrayLiteral: "[{{genParams(expr.items)}}]"
        mapLiteral: |- 
          {
            {{for prop in expr.properties|sep="\n"}}
              "{{prop.name}}" => {{gen(prop.initializer)}},
            {{/for}}
          }
