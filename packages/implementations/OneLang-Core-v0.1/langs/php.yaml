implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: php
    implementation:
      classes:
        OneString:
          fields:
            length: "strlen({{self}})"
          methods:
            substring: "substr({{self}}, {{start}}, {{end}} - {{start}})"
            split: "explode({{separator}}, {{self}})"
            get: "{{self}}[{{idx}}]"
            replace: "str_replace({{from}}, {{to}}, {{self}})"
            substrMatch: "substr_compare({{self}}, {{str}}, {{offset}}, strlen({{str}})) === 0"
        OneArray:
          fields:
            length: "count({{self}})"
          methods:
            add: "{{self}}[] = {{item}}"
            get: "{{self}}[{{index}}]"
            set: "{{self}}[{{index}}] = {{value}}"
        OneMap:
          methods:
            keys: "array_keys({{self}})"
            values: "array_values({{self}})"
            remove: "unset({{self}}[{{key}}])"
            hasKey: "array_key_exists({{key}}, {{self}})"
            get: "{{self}}[{{key}}]"
            set: "{{self}}[{{key}}] = {{value}}"
        OneError:
          methods:
            raise: throw new Exception({{message}})
        One:
          methods:
            langName: '"PHP"'
      operators:
        OneString + OneString: "{{left}} . {{right}}"
        OneString + OneCharacter: "{{left}} . {{right}}"
        OneString + OneNumber: "{{left}} . {{right}}"
        OneString + OneBoolean: '{{left}} . (({{right}}) ? "true" : "false")'
        OneString += OneString: "{{left}} .= {{right}}"
        OneString += OneCharacter: "{{left}} .= {{right}}"
      expressions:
        arrayLiteral: "array({{genParams(expr.items)}})"
        mapLiteral: |- 
          array(
            {{for prop in expr.properties|sep="\n"}}
              "{{prop.name}}" => {{gen(prop.initializer)}},
            {{/for}}
          )
