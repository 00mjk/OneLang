implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: python
    implementation:
      classes:
        OneString:
          fields:
            length: "len({{self}})"
          methods:
            substring: "{{self}}[{{start}}:{{end}}]"
            split: "{{self}}.split({{separator}})"
            get: "{{self}}[{{idx}}]"
            replace: "{{self}}.replace({{from}}, {{to}})"
            substrMatch: "{{self}}.startswith({{str}}, {{offset}})"
        OneArray:
          fields:
            length: "len({{self}})"
          methods:
            add: "{{self}}.append({{item}})"
            get: "{{self}}[{{index}}]"
            set: "{{self}}[{{index}}] = {{value}}"
        OneMap:
          methods:
            keys: "{{self}}.keys()"
            values: "{{self}}.values()"
            remove: "del {{self}}[{{key}}]"
            hasKey: "{{key}} in {{self}}"
            get: "{{self}}[{{key}}]"
            set: "{{self}}[{{key}}] = {{value}}"
        OneError:
          methods:
            raise: raise Exception({{message}})
        One:
          methods:
            langName: '"Python"'
      operators:
        OneString + OneNumber: "{{left}} + str({{right}})"
        OneString + OneBoolean: '{{left}} + ("true" if {{right}} else "false")'
      expressions:
        arrayLiteral: "[{{genParams(expr.items)}}]"
        mapLiteral: |- 
          {
            {{for prop in expr.properties|sep="\n"}}
              "{{prop.name}}": {{gen(prop.initializer)}},
            {{/for}}
          }
