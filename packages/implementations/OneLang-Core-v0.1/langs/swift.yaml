implements:
  - interface: { name: One.Core, minver: 0.1, maxver: 0.1 }
    language: swift
    implementation:
      classes:
        OneString:
          type: String
          fields:
            length: "{{self}}.count"
          methods:
            substring: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{start}}) ..< {{self}}.index({{self}}.startIndex, offsetBy: {{end}})])"
            split: "{{self}}.split(separator: {{separator}}, omittingEmptySubsequences: false)"
            get: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{idx}})])"
            replace:
              includes: ["Foundation"]
              template: "{{self}}.replacingOccurrences(of: {{from}}, with: {{to}})"
            substrMatch: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{offset}}) ..< {{self}}.endIndex]).hasPrefix({{str}})"
        OneNumber:
          type: Int
        OneBoolean:
          type: Bool
        OneArray:
          type: "[{{genType(typeArguments[0])}}]"
          fields:
            length: "{{self}}!.count"
          methods:
            add:
              mutates: true
              template: "{{self}}!.append({{item}})"
            get: "{{self}}![{{index}}]"
            set: "{{self}}![{{index}}] = {{value}}"
        OneMap:
          type: "[{{genType(typeArguments[0])}}: {{genType(typeArguments[1])}}]"
          methods:
            keys: "Array({{self}}!.keys)"
            values: "Array({{self}}!.values)"
            remove:
              mutates: true
              template: "{{self}}![{{key}}] = nil"
            hasKey: "{{self}}![{{key}}] != nil"
            get: "{{self}}![{{key}}]!"
            set:
              mutates: true
              template: "{{self}}![{{key}}] = {{value}}"
        OneError:
          methods:
            raise:
              throws: true
              template: throw OneError.RuntimeError({{message}})
        One:
          methods:
            langName: '"Swift"'
      expressions:
        arrayLiteral: |-
          {{if expr.items.length > 0}}
            [{{genParams(expr.items)}}]
          {{else}}
            [{{expr.typeArgs[0]}}]()
          {{/if}}
        mapLiteral: |- 
          [
            {{for prop in expr.properties|sep=",\n"}}
              "{{prop.name}}": {{gen(prop.initializer)}}
            {{/for}}
          ]
