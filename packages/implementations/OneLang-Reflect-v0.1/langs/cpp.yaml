implements:
  - interface: { name: One.Reflect, minver: 0.1, maxver: 0.1 }
    language: cpp
    native-includes: [one.hpp]
    implementation:
      templates:
        afterClass:
          args: [class]
          template: |-
            {{if class.attributes["reflect"]}}
              {{ include("any") }}
              {{ include("OneLang-Core-v0.1/one.hpp") }}
              {{ include("OneLang-Reflect-v0.1/one.hpp") }}
              static struct Reflection{{class.name}}
              {
                Reflection{{class.name}}() {
                  OneReflect::addClass("{{class.name}}", typeid({{class.name}}))
                    {{for field in class.fields}}
                      {{if field.static}}
                        .addField(std::make_shared<OneField>("{{field.name}}", /*isStatic*/ true, "{{field.type}}", 
                            [](one::sp<ReflectedClass> obj){ return (std::any){{class.name}}::{{field.name}}; },
                            [](one::sp<ReflectedClass> obj, std::any value){ {{class.name}}::{{field.name}} = std::any_cast<{{field.type}}>(value); }))
                      {{else}}
                        .addField(std::make_shared<OneField>("{{field.name}}", /*isStatic*/ false, "{{field.type}}", 
                            [](one::sp<ReflectedClass> obj){ return (std::any)std::static_pointer_cast<{{class.name}}>(obj)->{{field.name}}; },
                            [](one::sp<ReflectedClass> obj, std::any value){ std::static_pointer_cast<{{class.name}}>(obj)->{{field.name}} = std::any_cast<{{field.type}}>(value); }))
                      {{/if}}
                    {{/for}}
                    {{for method in class.methods}}
                      .addMethod(std::make_shared<OneMethod>("{{method.name}}", /*isStatic*/ {{if method.static}}true{{else}}false{{/if}}, "{{method.returnType}}", std::vector<OneMethodArgument> {
                          {{for param in method.parameters}}
                            OneMethodArgument("{{param.name}}", "{{param.type}}"),
                          {{/for}}
                        }, 
                        [](one::sp<ReflectedClass> obj, one::vec<std::any> args){ 
                          {{if !method.returnTypeInfo.isVoid}}return (std::any){{/if}}
                          {{if method.static|inline}}
                            {{class.name}}::{{method.name}}
                          {{else|inline}}
                            std::static_pointer_cast<{{class.name}}>(obj)->{{method.name}}
                          {{/if}}
                          (
                            {{for param in method.parameters|inline sep=,}}
                              std::any_cast<{{param.type}}>(args->at({{param_idx}}))
                            {{/for}}
                          ); 
                          {{if method.returnTypeInfo.isVoid|inline}}return (std::any)nullptr; {{/if}}
                        }))
                    {{/for}}
                    ;
                }
              } _reflection{{class.name}};
            {{/if}}