extension: swift
casing:
  class: pascal_case
  method: camel_case
primitiveTypes:
  void: Void
classes:
  OneString:
    type: String
    methods:
      substring:
        template: "{{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{start}}) ..< {{self}}.index({{self}}.startIndex, offsetBy: {{end}})]"
  OneNumber:
    type: Int
  OneBoolean:
    type: Bool
  OneConsole:
    methods:
      print:
        template: "print({{str}})"
  OneArray:
    fields:
      length:
        template: "{{self}}.count"
    methods:
      add:
        mutates: true
        template: "{{self}}.append({{item}})"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "Array({{self}}.keys)"
      values:
        template: "Array({{self}}.values)"
      remove:
        mutates: true
        template: "{{self}}[{{key}}] = nil"
      hasKey:
        template: "{{self}}[{{key}}] != nil"
      get:
        template: "{{self}}[{{key}}]!"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
templates:
  testGenerator: |-
    print({{class}}().{{method}}())

  main: |
    {{for inc in includes|sep=\n}}
      import {{inc}}
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
        {{for field in class.fields|sep=\n}}
            var {{field.name}}: {{field.type}}?
        {{/for}}

        {{for method in class.methods|sep=\n\n}}
            func {{method.name}}({{genArgs(method)}}) -> {{method.returnType}} {
                {{genBody(method.body)}}
            }
        {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}: {{param.type}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{if itemVar.isMutable}}var{{else}}let{{/if}} {{if itemVar.isUnused}}_{{else}}{{itemVar.name}}{{/if}} = {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{arg.paramName}}: {{gen(arg)}}
      {{/for}}
    )
  stringLiteral: "\"{{expr.value}}\""
  return: "return {{gen(expr.expression)}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  nullLiteral: "nil"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.class)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    [
      {{for prop in expr.properties|sep=",\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}}
      {{/for}}
    ]
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}.{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}!"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  foreach: |-
    for {{expr.itemVariable.name}} in {{gen(expr.items)}} {
        {{genBody(expr.body)}}
    }
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
    }
  if: |-
    if {{gen(expr.condition)}} {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{if isIfBlock(expr.else)}}
        \ else\ {{genBody(expr.else)|inline}}
      {{else}}
        \ else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
