functions:
  stdlib.console.print:
    arguments:
      - name: str
    includes:
      - System
    template: |
      Console.WriteLine({{str}});
extension: cs
casing:
  class: pascal_case
  method: pascal_case
primitiveTypes:
  void: void
  boolean: bool
  string: string
  int32: int
array: '{{type}}[]'
templates:
  testGenerator: |
    public class Program
    {
        static public void Main()
        {
            new {{class}}().{{method}}();
        }
    }

  main: |
    {{for inc in includes}}
      using {{inc}};
    {{/for}}

    {{for class in classes}}
      public class {{class.name}}
      {
          {{for method in class.methods}}
            {{method.visibility}} {{method.returnType}} {{method.name}}({{genArgs(method)}})
            {
              {{genBody(method.body)}}
            }
          {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |
      {{for statement in body.statements}}
        {{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters}}
        {{if param.idx != 0}},{{/if}}
        {{param.type}} {{param.name}}
      {{/for}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments}}
        {{if arg.idx != 0}},{{/if}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: |-
    {{gen(expr.object)}}.{{gen(expr.propertyName)}}
  identifier: |-
    {{expr.text}}
  stringLiteral: |-
    "{{expr.value}}"