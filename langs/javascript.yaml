functions:
  stdlib.console.print:
    arguments:
      - name: str
    template: |-
      console.log({{str}});
extension: js
casing:
  class: pascal_case
  method: camel_case
templates:
  testGenerator: |-
    new {{class}}().{{method}}();

  main: |-
    {{for class in classes}}
      class {{class.name}} {
        {{for method in class.methods|sep=\n\n}}
          {{method.name}}({{genArgs(method)}}) {
            {{genBody(method.body)}}
          }
        {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements}}
        {{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.type}} {{param.name}}
      {{/for}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: "\"{{expr.value}}\""
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
