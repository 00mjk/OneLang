extension: cpp
casing:
  class: pascal_case
  method: camel_case
primitiveTypes:
  void: void
  any: any
classes:
  OneString:
    type: string
    fields:
      length:
        template: "{{self}}.size()"
    methods:
      substring:
        template: "{{self}}.substr({{start}}, {{end}} - {{start}})"
      split:
        template: "OneStringHelper::split({{self}}, {{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
  OneNumber:
    type: int
  OneBoolean:
    type: bool
  OneArray:
    includes: [vector]
    type: "vector<{{typeArgs[0]}}>"
    fields:
      length: 
        template: "{{self}}.size()"
    methods:
      add: 
        template: "{{self}}.push_back({{item}})"
      get: 
        template: "{{self}}.at({{index}})"
      set: 
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    includes: [map]
    methods:
      keys: 
        template: "OneMapHelper::keys({{self}})"
      values: 
        template: "OneMapHelper::values({{self}})"
      remove: 
        template: "{{self}}.erase({{key}})"
      hasKey: 
        template: "{{self}}.find({{key}}) != {{self}}.end()"
      get: 
        template: "{{self}}[{{key}}]"
      set: 
        template: "{{self}}[{{key}}] = {{value}}"
  OneConsole:
    includes: [iostream]
    methods:
      print:
        template: "cout << ({{str}}) << endl"
  OneError:
    includes: [stdexcept]
    methods:
      raise:
        template: throw std::runtime_error({{message}})
operators:
  OneString + OneNumber:
    includes: [string]
    template: "{{gen(left)}} + to_string({{gen(right)}})"
  OneString + OneBoolean:
    template: '{{gen(left)}} + ({{gen(right)}} ? "true" : "false")'
includes: [memory, fstream, vector, map]
templates:
  testGenerator: |-
    int main()
    {
        try {
            {{class}} c;
            c.{{method}}();
        } catch(std::exception& err) {
            cout << "Exception: " << err.what() << '\n';
        }
        return 0;
    }

  main: |-
    #include <one.hpp>
    {{for inc in includes|sep=\n}}
      #include <{{inc}}>
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
        public:
          {{genFields(class.publicFields)}}

          {{if class.constructor}}
            {{class.name}}({{genArgs(class.constructor)}}) {
                {{genBody(class.constructor.body)}}
            }
          {{/if}}

          {{genMethods(class.publicMethods)}}

        private:
          {{genFields(class.privateFields)}}

          {{genMethods(class.privateMethods)}}
      };

      {{for field in class.fields|sep=\n}}
        {{if field.static && field.initializer}}
          {{getType(field.typeInfo)}} {{class.name}}::{{field.name}} = {{gen(field.initializer)}};
        {{/if}}
      {{/for}}
    {{/for}}
  genFields:
    args:
      - name: fields
    template: |-
      {{for field in fields|sep=\n}}
        {{if field.static}}static {{/if}}{{getType(field.typeInfo)}} {{field.name}};
      {{/for}}
  getType:
    args:
      - name: item
    template: |-
      {{if item.isComplexClass && !item.isOneArray}}
        sp<{{typeName(item)}}>
      {{elif item.isOneArray}}
        vector<{{getType(item.typeArguments[0])}}>
      {{else}}
        {{typeName(item)}}
      {{/if}}

  getTypeX:
    args:
      - name: type
    template: "{{typeName(type)}}{{if type.isComplexClass}}*{{/if}}"

  genMethods:
    args:
      - name: methods
    template: |-
      {{for method in methods|sep=\n\n}}
        {{if method.static}}static {{/if}}{{getType(method.returnTypeInfo)}} {{method.name}}({{genArgs(method)}}) {
            {{genBody(method.body)}}
        }
      {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.type}} {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: |-
      {{if itemVar.type.isNumber}}int{{else}}auto{{/if}} {{itemVar.name}} = {{gen(itemVar.initializer)}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}->{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: 'string("{{expr.escapedText}}")'
  characterLiteral: "'{{expr.escapedText}}'"
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "throw {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  nullLiteral: "nullptr"
  variableDeclaration: "{{genVar(expr)}};"
  new: "make_shared<{{gen(expr.cls)}}>({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "vector<{{getType(expr.valueType.typeArguments[0])}}> { {{genParams(expr.items)}} }"
  mapLiteral: |- 
    map<{{getType(expr.valueType.typeArguments[0])}}, {{getType(expr.valueType.typeArguments[1])}}> {
      {{for prop in expr.properties|sep=",\n"}}
        { "{{prop.name}}", {{gen(prop.initializer)}} }
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}->{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}::{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}->{{expr.varRef.name}}"
  staticField: "{{gen(expr.thisExpr)}}::{{expr.varRef.name}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "(*{{gen(expr.object)}})[{{gen(expr.elementExpr)}}]"
  thisReference: this
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  templateString: |-
    string() + 
    {{for part in expr.parts|sep=" + " inline}}
      {{if part.literal|inline}}
        "{{part.text}}"
      {{else}}
        {{if part.expr.valueType.isNumber|inline}}
          to_string({{gen(part.expr)}})
        {{else}}
          {{if part.expr.valueType.isBoolean|inline}}
            (({{gen(part.expr)}}) ? "true" : "false")
          {{else}}
            {{gen(part.expr)}}
          {{/if}}
        {{/if}}
      {{/if}}
    {{/for}}
  foreach: |-
    for (auto it = {{gen(expr.items)}}.begin(); it != {{gen(expr.items)}}.end(); ++it) {
        auto {{expr.itemVariable.name}} = *it;
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  while: |-
    while ({{gen(expr.condition)}}) {
        {{genBody(expr.body)}}
    }
  break: break;
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        else {{genBody(expr.else)|inline}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}