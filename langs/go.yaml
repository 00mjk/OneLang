extension: go
casing:
  class: pascal_case
  method: pascal_case
  field: pascal_case
  enum: pascal_case
  enumMember: upper_case
primitiveTypes:
  void: ""
classes:
  OneString:
    type: string
    fields:
      length:
        template: "len({{self}})"
    methods:
      substring:
        template: "{{self}}[{{start}}:{{end}}]"
      split:
        #includes: [strings]
        template: "strings.Split({{self}}, {{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
      substrMatch:
        template: "{{self}}[{{offset}}:{{offset}} + len({{str}})] == {{str}}"
      replace:
        includes: [strings]
        template: "strings.Replace({{self}}, {{from}}, {{to}}, -1)"
  OneNumber:
    type: int
  OneBoolean:
    type: bool
  OneConsole:
    methods:
      print:
        #includes: [fmt]
        template: "fmt.Println({{str}})"
  OneArray:
    type: "[]{{typeArgs[0]}}"
    fields:
      length:
        template: "len({{self}})"
    methods:
      add:
        template: "{{self}} = append({{self}}, {{item}})"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        extraArgs: [result]
        template: |-
          {{result}} := make([]{{typeArgs[0]}}, 0, len({{self}}))
          for  key, _ := range {{self}} {
            {{result}} = append({{result}}, key)
          }
      values:
        extraArgs: [result]
        template: |-
          {{result}} := make([]{{typeArgs[1]}}, 0, len({{self}}))
          for  _, value := range {{self}} {
            {{result}} = append({{result}}, value)
          }
      remove:
        template: "delete({{self}}, {{key}})"
      hasKey:
        extraArgs: [result]
        template: "_, {{result}} := {{self}}[{{key}}]"
      get:
        template: "{{self}}[{{key}}]"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    includes: [io/ioutil]
    methods:
      readText:
        extraArgs: [result]
        template: |-
          file_content_bytes, _ := ioutil.ReadFile({{fn}})
          {{result}} := string(file_content_bytes)
  OneError:
    methods:
      raise:
        template: panic({{message}})
operators:
  OneString + OneNumber:
    includes: [strconv]
    template: "{{gen(left)}} + strconv.Itoa({{gen(right)}})"
  OneString + OneBoolean:
    includes: [strconv]
    template: "{{gen(left)}} + strconv.FormatBool({{gen(right)}})"
  OneString += OneCharacter:
    template: "{{gen(left)}} += string({{gen(right)}})"
templates:
  testGenerator: |-
    func main() {
        defer func() {
          if r := recover(); r != nil {
              fmt.Print("Exception: ", r)
          }
        }()

        c := New{{class}}()
        c.{{method}}();
    }

  main: |-
    package main

    import "fmt"
    {{for inc in includes|sep=\n}}
      import "{{inc}}"
    {{/for}}

    {{for enum in enums|sep=\n\n}}
      type {{enum.name}} int
      const (
          {{for item in enum.values}}
            {{enum.name}}_{{item.name}} = {{item.intValue}}
          {{/for}}
      )
    {{/for}}    

    {{for class in classes|sep=\n\n}}
      type {{class.name}} struct {
          {{for field in class.instanceFields|sep=\n}}
            {{field.name}} {{getType(field.typeInfo)}}
          {{/for}}
      }

      func New{{class.name}}({{if class.constructor}}{{genArgs(class.constructor)}}{{/if}}) *{{class.name}} {
          this := new({{class.name}})
          {{for field in class.fields|sep=\n}}
            {{if field.static == false && field.initializer}}
              this.{{field.name}} = {{gen(field.initializer)}}
            {{/if}}
          {{/for}}
          {{if class.constructor}}
            {{genBody(class.constructor.body)}}
          {{/if}}
          return this
      }

      {{for method in class.methods|sep=\n\n}}
        func 
        {{if method.static|inline}}
          {{class.name}}_{{method.name}}
        {{else}}
          (this *{{class.name}}) {{method.name}}
        {{/if}}
        ({{genArgs(method)}}) 
        {{if method.returnType|inline}}
          {{getType(method.returnTypeInfo)}} 
        {{/if}}
        {
            {{genBody(method.body)}}
        }
      {{/for}}

      {{for field in class.staticFields|sep=\n}}
        var {{class.name}}{{field.name}} {{field.type}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}};
      {{/for}}
    {{/for}}

  getType:
    args:
      - name: item
    template: |-
      {{if item.isComplexClass && !item.isOneArray}}
        *{{typeName(item)}}
      {{elif item.isOneArray}}
        []{{getType(item.typeArguments[0])}}
      {{else}}
        {{typeName(item)}}
      {{/if}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}} {{param.type}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{itemVar.name}} := {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: "'{{expr.escapedTextSingle}}'"
  nullLiteral: "nil"
  return: "return {{gen(expr.expression)}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "panic({{gen(expr.expression)}});"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}}"
  new: "New{{gen(expr.cls)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}_{{expr.enumMemberRef.outName}}"
  arrayLiteral: "[]{{getType(expr.valueType.typeArguments[0])}}{{{genParams(expr.items)}}}"
  mapLiteral: |- 
    map[{{expr.typeArgs[0]}}]{{expr.typeArgs[1]}}{
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.outName}}"
  staticMethod: "{{expr.methodRef.classRef.outName}}_{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  staticField: "{{gen(expr.thisExpr)}}{{expr.varRef.outName}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: this
  break: break
  templateString: |-
    fmt.Sprintf("
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{part.text}}
      {{else}}
        %v
      {{/if}}
    {{/for}}
    "
    {{for part in expr.parts|inline}}
      {{if part.expr|inline}}
        , {{gen(part.expr)}}
      {{/if}}
    {{/for}}
    )
  conditional: |-
    var {{result}} {{typeName(expr.valueType)}}
    if {{gen(expr.condition)}} {
      {{result}} = {{gen(expr.whenTrue)}}
    } else {
      {{result}} = {{gen(expr.whenFalse)}}
    }
  foreach: |-
    for _, {{expr.itemVariable.name}} := range {{gen(expr.items)}} {
        {{genBody(expr.body)}}
    }
  for: |-
    for {{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}} {
        {{genBody(expr.body)}}
    }
  while: |-
    for {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
    }
  if: |-
    if {{gen(expr.condition)}} {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        else {{genBody(expr.else)}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
