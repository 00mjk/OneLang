functions:
  stdlib.console.print:
    arguments:
      - name: str
    includes:
      - fmt
    template: |-
      fmt.Println({{str}})
extension: go
casing:
  class: camel_case
  method: camel_case
primitiveTypes:
  void: ""
  boolean: bool
  string: string
  int32: int
array: '[]{{type}}'
templates:
  testGenerator: |-
    func main() {
        c := ({{class}}{})
        c.{{method}}()
    }

  main: |-
    package main

    {{for inc in includes}}
      import "{{inc}}"
    {{/for}}

    {{for class in classes}}
      type {{class.name}} struct { }

      {{for method in class.methods|sep=\n\n}}
        func (this *{{class.name}}) {{method.name}}({{genArgs(method)}}) {{method.returnType}} {
            {{genBody(method.body)}}
        }

      {{/for}}
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements}}
        {{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}} {{param.type}}
      {{/for}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: "\"{{expr.value}}\""
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
