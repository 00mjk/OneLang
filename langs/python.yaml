extension: py
casing: # based on https://www.python.org/dev/peps/pep-0008/
  class: pascal_case
  method: snake_case
  field: snake_case
  property: snake_case
  variable: snake_case
  enum: pascal_case
  enumMember: upper_case
classes:
  OneString:
    fields:
      length: "len({{self}})"
    methods:
      substring: "{{self}}[{{start}}:{{end}}]"
      split: "{{self}}.split({{separator}})"
      get: "{{self}}[{{idx}}]"
      replace: "{{self}}.replace({{from}}, {{to}})"
      substrMatch: "{{self}}.startswith({{str}}, {{offset}})"
  OneConsole:
    methods:
      print: "print {{str}}"
  OneArray:
    fields:
      length: "len({{self}})"
    methods:
      add: "{{self}}.append({{item}})"
      get: "{{self}}[{{index}}]"
      set: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys: "{{self}}.keys()"
      values: "{{self}}.values()"
      remove: "del {{self}}[{{key}}]"
      hasKey: "{{key}} in {{self}}"
      get: "{{self}}[{{key}}]"
      set: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        extraArgs: [result]
        template: "with open({{fn}}, 'r') as f: {{result}} = f.read()"
  OneError:
    methods:
      raise: raise Exception({{message}})
  OneRegex:
    includes: ["one"]
    template: "one.Regex"
  OneReflect:
    includes: ["one"]
    template: "one.Reflect"
  OneBigInteger:
    methods:
      fromInt: "{{value}}"
  OneJson:
    methods:
      parse:
        includes: [json]
        template: "json.loads({{str}})"
  OneJValue:
    methods:
      isObject: "isinstance({{self}}, dict)"
      isArray: "isinstance({{self}}, list)"
      isString: "isinstance({{self}}, str)"
      isNumber: "isinstance({{self}}, (int, long, float))"
      isBool: "({{self}} == True or {{self}} == False)"
      isNull: "({{self}} is None)"
      asString: "{{self}}"
      asNumber: "{{self}}"
      asBool: "{{self}}"
      asObject: "{{self}}"
      getArrayItems: "{{self}}"
  OneJObject:
    methods:
      getProperties: "{{self}}.keys()"
      get: "{{self}}[{{name}}]"
  OneJProperty:
    methods:
      getName: "{{self}}"
      getValue: "{{obj}}[{{self}}]"
  One:
    methods:
      langName: '"Python"'
operators:
  OneString + OneNumber: "{{gen(left)}} + str({{gen(right)}})"
  OneString + OneBoolean: '{{gen(left)}} + ("true" if {{gen(right)}} else "false")'
templates:
  testGenerator: |-
    try:
        {{class}}().{{method}}()
    except Exception as err:
        print "Exception: " + err.message

  main: |-
    {{if enums.length > 0}}
      from enum import Enum
    {{/if}}
    {{for inc in includes|sep=\n}}
      import {{inc.name}}
    {{/for}}

    {{for enum in enums|sep=\n\n}}
      class {{enum.name}}(Enum):
          {{for item in enum.values}}
            {{item.name}} = {{item.intValue}}
          {{/for}}
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}}{{if class.baseClass}}({{class.baseClass}}){{/if}}:
          {{if class.needsConstructor}}
            def __init__({{if class.constructor}}{{genArgs(class.constructor)}}{{else}}self{{/if}}):
                {{for field in class.fields|sep=\n}}
                  {{if field.static == false && field.initializer}}
                    self.{{field.name}} = {{gen(field.initializer)}}
                  {{/if}}
                {{/for}}
                {{if class.constructor}}
                  {{genBody(class.constructor.body)}}
                {{/if}}
          {{/if}}

          {{for method in class.methods|sep="\n    \n"}}
            {{if method.static}}
              @staticmethod
            {{/if}}
            def {{method.name}}({{genArgs(method)}}):
                {{genBody(method.body)}}
          {{/for}}

          {{if class.methods.length == 0 && class.constructor == null}}
            pass
          {{/if}}

      {{for field in class.fields|sep=\n}}
        {{if field.static && field.initializer}}
          {{class.name}}.{{field.name}} = {{gen(field.initializer)}};
        {{/if}}
      {{/for}}

      {{if class.attributes["reflect"]}}
        one.Reflect.setup_class(one.Class({{class.name}}, [
            {{for field in class.fields|sep=\n}}
              one.Field("{{field.name}}", {{if field.static}}True{{else}}False{{/if}}, "{{field.type}}"),
            {{/for}}
          ], [
            {{for method in class.methods|sep=\n}}
              one.Method("{{method.name}}", {{if method.static}}True{{else}}False{{/if}}, "{{method.returnType}}", [
                {{for param in method.parameters|sep=\n}}
                  one.MethodArgument("{{param.name}}", "{{param.type}}"),
                {{/for}}
              ]),
            {{/for}}
          ]));
      {{/if}}
    {{/for}}

    {{for statement in mainBlock.statements|sep=\n}}
      {{statement.leadingTrivia2}}{{gen(statement)}}
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia2}}{{gen(statement)}}
      {{else}}
        pass
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{if method.static}}
        {{for param in method.parameters|sep=", " inline}}
          {{param.name}}
        {{/for}}
      {{else}}
        self
        {{for param in method.parameters|inline}}
          , {{param.name}}
        {{/for}}
      {{/if}}

  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}

  genVar:
    args:
      - name: itemVar
    template: "{{itemVar.outName}} = {{gen(itemVar.initializer)}}"

expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  nullLiteral: "None"
  return: "return{{if expr.expression}} {{gen(expr.expression)}}{{/if}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  binary&&: "{{gen(expr.left)}} and {{gen(expr.right)}}"
  binary||: "{{gen(expr.left)}} or {{gen(expr.right)}}"
  prefix!: "not {{gen(expr.operand)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "raise {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.cls)}}({{genParams(expr.arguments)}})"
  classReference: "{{clsName(expr.classRef)}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}.{{expr.enumMemberRef.outName}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.outName}}"
  staticMethod: "{{clsName(expr.methodRef.classRef)}}.{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.outName}}"
  methodArgument: "{{expr.varRef.outName}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  falseLiteral: "False"
  trueLiteral: "True"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.whenTrue)}} if {{gen(expr.condition)}} else {{gen(expr.whenFalse)}}"
  break: break
  templateString: |-
    "
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{escapeQuotes(part.text)}}
      {{else}}
        %s
      {{/if}}
    {{/for}}
    " % (
    {{for part in expr.parts|inline sep=", "}}
      {{if part.expr|inline}}
        {{if part.expr.valueType.isBoolean|inline}}
          "true" if {{gen(part.expr)}} else "false"
        {{else}}
          {{gen(part.expr)}}
        {{/if}}
      {{/if}}
    {{/for}}
    )
  foreach: |-
    for {{expr.itemVariable.outName}} in {{gen(expr.items)}}:
        {{genBody(expr.body)}}
  while: |-
    while {{gen(expr.condition)}}:
        {{genBody(expr.body)}}
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}}:
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
  if: |-
    if {{gen(expr.condition)}}:
        {{genBody(expr.then)}}
    {{if expr.else}}
      {{if isIfBlock(expr.else)}}
        el{{genBody(expr.else)|inline}}
      {{else}}
        else:
            {{genBody(expr.else)}}
      {{/if}}
    {{/if}}