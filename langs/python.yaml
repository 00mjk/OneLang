extension: py
casing:
  class: pascal_case
  method: snake_case
classes:
  OneString:
    fields:
      length:
        template: "len({{self}})"
    methods:
      substring:
        template: "{{self}}[{{start}}:{{end}}]"
      split:
        template: "{{self}}.split({{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
  OneConsole:
    methods:
      print:
        template: "print {{str}}"
  OneArray:
    fields:
      length:
        template: "len({{self}})"
    methods:
      add:
        template: "{{self}}.append({{item}})"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "{{self}}.keys()"
      values:
        template: "{{self}}.values()"
      remove:
        template: "del {{self}}[{{key}}]"
      hasKey:
        template: "{{key}} in {{self}}"
      get:
        template: "{{self}}[{{key}}]"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        extraArgs: [result]
        template: "with open({{fn}}, 'r') as f: {{result}} = f.read()"
templates:
  testGenerator: |-
    {{class}}().{{method}}()

  main: |-
    {{for inc in includes|sep=\n}}
      import {{inc}};
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}}:
          {{for method in class.methods|sep=\n\n}}
              def {{method.name}}({{genArgs(method)}}):
                  {{genBody(method.body)}}
          {{/for}}
          {{if class.methods.length == 0}}
              pass
          {{/if}}

      {{for field in class.fields|sep=\n}}
        {{if field.static && field.initializer}}
          {{class.name}}.{{field.name}} = {{gen(field.initializer)}};
        {{/if}}
      {{/for}}
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
          {{statement.leadingTrivia2}}{{gen(statement)}}
      {{/for}}
      {{if body.statements.length == 0}}
          pass
      {{/if}}

  genArgs:
    args:
      - name: method
    template: |-
      self
      {{for param in method.parameters|inline}}
        , {{param.name}}
      {{/for}}

  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}

  genVar:
    args:
      - name: itemVar
    template: "{{itemVar.name}} = {{gen(itemVar.initializer)}}"

expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: "\"{{expr.value}}\""
  nullLiteral: "None"
  return: "return {{gen(expr.expression)}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.class)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}.{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  falseLiteral: "False"
  trueLiteral: "True"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.whenTrue)}} if {{gen(expr.condition)}} else {{gen(expr.whenFalse)}}"
  foreach: |-
    for {{expr.itemVariable.name}} in {{gen(expr.items)}}:
        {{genBody(expr.body)}}
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}}:
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
  if: |-
    if {{gen(expr.condition)}}:
        {{genBody(expr.then)}}
    {{if expr.else}}
      {{if isIfBlock(expr.else)}}
        el{{genBody(expr.else)|inline}}
      {{else}}
        else:
            {{genBody(expr.else)}}
      {{/if}}
    {{/if}}