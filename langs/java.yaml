extension: java
casing:
  class: pascal_case
  method: camel_case
primitiveTypes:
  any: Object
  void: void
classes:
  OneString:
    type: String
    methods:
      substring:
        template: "{{self}}.substring({{start}}, {{end}})"
      split:
        template: "Arrays.asList({{self}}.split({{separator}}))"
  OneNumber:
    type: Integer
  OneBoolean:
    type: boolean
  OneConsole:
    methods:
      print:
        template: "System.out.println({{str}})"
  OneArray:
    type: "List<{{typeArgs[0]}}>"
    fields:
      length:
        template: "{{self}}.size()"
    methods:
      add:
        template: "{{self}}.add({{item}})"
      get:
        template: "{{self}}.get({{index}})"
      set:
        template: "{{self}}.set({{index}}], {{value}})"
  OneMap:
    type: "HashMap<{{typeArgs[0]}}, {{typeArgs[1]}}>"
    methods:
      keys:
        template: "new ArrayList({{self}}.keySet())"
      values:
        template: "new ArrayList({{self}}.values())"
      remove:
        template: "{{self}}.remove({{key}})"
      hasKey:
        template: "{{self}}.containsKey({{key}})"
      get:
        template: "{{self}}.get({{key}})"
      set:
        template: "{{self}}.put({{key}}, {{value}})"
templates:
  testGenerator: |-
    class Program {
        public static void main(String[] args) {
            System.out.println(new {{class}}().{{method}}());
        }
    }

  main: |-
    import java.util.ArrayList; // TODO: hack
    import java.util.List;
    import java.util.Arrays;
    import java.util.HashMap;

    {{for inc in includes|sep=\n}}
      using {{inc}};
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
          {{for field in class.fields|sep=\n}}
            {{field.visibility}} {{field.type}} {{field.name}};
          {{/for}}

          {{for method in class.methods|sep=\n\n}}
              {{method.visibility}} {{method.returnType}} {{method.name}}({{genArgs(method)}})
              {
                  {{genBody(method.body)}}
              }
          {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.type}} {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{typeName(itemVar.type)}} {{itemVar.name}} = {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: "\"{{expr.value}}\""
  nullLiteral: "null"
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}};"
  new: "new {{gen(expr.class)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "new ArrayList<{{expr.typeArgs[0]}}>(Arrays.asList({{genParams(expr.items)}}))"
  mapLiteralDeclaration: |- 
    HashMap<{{typeName(expr.initializer.valueType.typeArguments[0])}}, {{typeName(expr.initializer.valueType.typeArguments[1])}}> {{expr.name}} = new HashMap<{{typeName(expr.initializer.valueType.typeArguments[0])}}, {{typeName(expr.initializer.valueType.typeArguments[1])}}>();
    {{for prop in expr.initializer.properties|sep="\n"}}
      {{expr.name}}.put("{{prop.name}}", {{gen(prop.initializer)}});
    {{/for}}
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}.{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}.get({{gen(expr.elementExpr)}})"
  thisReference: this
  foreach: |-
    for ({{typeName(expr.itemVariable.type)}} {{expr.itemVariable.name}} : {{gen(expr.items)}}) {
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{if isIfBlock(expr.else)}}
        \ else\ {{genBody(expr.else)|inline}}
      {{else}}
        \ else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
