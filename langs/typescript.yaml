extension: ts
casing:
  class: pascal_case
  method: camel_case
  field: camel_case
  property: camel_case
primitiveTypes:
  void: void
  any: object
classes:
  OneString:
    type: string
    fields:
      length:
        template: "{{self}}.length"
    methods:
      substring:
        template: "{{self}}.substring({{start}}, {{end}})"
      split:
        template: "{{self}}.split({{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
  OneNumber:
    type: number
  OneBoolean:
    type: bool
  OneConsole:
    methods:
      print:
        template: "console.log({{str}})"
  OneArray:
    fields:
      length:
        template: "{{self}}.length"
    methods:
      add:
        template: "{{self}}.push({{item}})"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "Object.keys({{self}})"
      values:
        template: "Object.values({{self}})"
      remove:
        template: "delete {{self}}[{{key}}]"
      hasKey:
        template: "{{key}} in {{self}}"
      get:
        template: "{{self}}[{{key}}]"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    includes: [fs]
    methods:
      readText:
        template: "fs.readFileSync({{fn}}, 'utf-8')"
templates:
  testGenerator: |-
    new {{class}}().{{method}}();

  main: |-
    {{for inc in includes|sep=\n}}
      const {{inc}} = require('{{inc}}');
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
        {{for field in class.fields|sep=\n}}
          {{field.visibility}} {{if field.static}}static {{/if}}{{field.name}}: {{field.type}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}};
        {{/for}}

        {{if class.constructor}}
          constructor({{genArgs(class.constructor)}}) {
              {{genBody(class.constructor.body)}}
          }
        {{/if}}

        {{for method in class.methods|sep=\n\n}}
          {{method.visibility}} {{if method.static}}static {{/if}}{{method.name}}({{genArgs(method)}}) {
            {{genBody(method.body)}}
          }
        {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}: {{param.type}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{if itemVar.isMutable}}let{{else}}const{{/if}} {{itemVar.name}} = {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  nullLiteral: "null"
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}};"
  new: "new {{gen(expr.class)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep=",\n"}}
        {{prop.name}}: {{gen(prop.initializer)}}
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}.{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}!"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: this
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break
  templateString: |-
    `
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{part.text}}
      {{else}}
        ${{{gen(part.expr)}}}
      {{/if}}
    {{/for}}
    `
  foreach: |-
    for (const {{expr.itemVariable.name}} of {{gen(expr.items)}}) {
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  while: |-
    while ({{gen(expr.condition)}}) {
        {{genBody(expr.body)}}
    }
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{if isIfBlock(expr.else)}}
         else {{genBody(expr.else)|inline}}
      {{else}}
         else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
