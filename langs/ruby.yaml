extension: rb
casing:
  class: pascal_case
  method: snake_case
classes:
  OneString:
    fields:
      length:
        template: "{{self}}.length"
    methods:
      substring:
        template: "{{self}}[{{start}}...{{end}}]"
      split:
        template: "{{self}}.split({{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
  OneConsole:
    methods:
      print:
        template: "puts {{str}}"
  OneArray:
    fields:
      length:
        template: "{{self}}.length"
    methods:
      add:
        template: "{{self}} << {{item}}"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "{{self}}.keys"
      values:
        template: "{{self}}.values"
      remove:
        template: "{{self}}.delete({{key}})"
      hasKey:
        template: "{{self}}.has_key?({{key}})"
      get:
        template: "{{self}}[{{key}}]"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        template: "IO.read({{fn}})"
templates:
  testGenerator: |-
    {{class}}.new().{{method}}()

  main: |-
    {{for inc in includes|sep=\n}}
      require '{{inc}}'
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}}\ 
        {{for field in class.fields|sep=\n}}
          {{if field.static}}
            @@{{field.name}}\ = {{if field.initializer}}{{gen(field.initializer)}}{{else}}nil{{/if}}
          {{else}}
            attr_accessor(:{{field.name}})
          {{/if}}
        {{/for}}

        def initialize({{if class.constructor}}{{genArgs(class.constructor)}}{{/if}})
            {{for field in class.fields|sep=\n}}
              {{if field.static == false && field.initializer}}
                @{{field.name}}\ = {{gen(field.initializer)}}
              {{/if}}
            {{/for}}

            {{if class.constructor}}
              {{genBody(class.constructor.body)}}
            {{/if}}
        end

        {{for method in class.methods|sep=\n\n}}
            def {{method.name}}({{genArgs(method)}})
                {{genBody(method.body)}}
            end
        {{/for}}
      end
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia2}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{itemVar.name}} = {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: "{{expr.escapedText}}"
  nullLiteral: "nil"
  return: "return {{gen(expr.expression)}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.class)}}.new({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}" => {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}.{{expr.methodRef.name}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.name}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break
  foreach: |-
    for {{expr.itemVariable.name}} in {{gen(expr.items)}}
        {{genBody(expr.body)}}
    end
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}}
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
    end
  while: |-
    while {{gen(expr.condition)}}
        {{genBody(expr.body)}}
    end
  if: |-
    if {{gen(expr.condition)}}
        {{genBody(expr.then)}}
    {{if expr.else}}
      {{if isIfBlock(expr.else)}}
        els{{genBody(expr.else)}}
      {{else}}
        else
            {{genBody(expr.else)}}
        end
      {{/if}}
    {{else}}
      end
    {{/if}}