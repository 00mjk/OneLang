extension: pl
casing: # based on https://swift.org/documentation/api-design-guidelines/
  class: pascal_case
  method: snake_case
  field: snake_case
  property: snake_case
  variable: snake_case
  enum: pascal_case
  enumMember: upper_case
classes:
  OneString:
    fields:
      length: "length({{self}})"
    methods:
      substring: "(substr {{self}}, {{start}}, ({{end}} - {{start}}))"
      split: "split({{separator}}, {{self}})"
      get: "(substr {{self}}, {{idx}}, 1)"
      replace:
        includes: ["one"]
        template: "One::str_replace({{self}}, {{from}}, {{to}})"
      substrMatch: "(substr {{self}}, {{offset}}, length({{str}})) eq ({{str}})"
  OneConsole:
    methods:
      print: 'print(({{str}}) . "\n")'
  OneArray:
    fields:
      length: "scalar(@{{{self}}})"
    methods:
      add: "push @{{{self}}}, {{item}}"
      get: "${{{self}}}[{{index}}]"
      set: "${{{self}}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys: "keys %{{{self}}}"
      values: "values %{{{self}}}"
      remove: "delete ${{{self}}}{{{key}}}"
      hasKey: "exists ${{{self}}}{{{key}}}"
      get: "${{{self}}}{{{key}}}"
      set: "${{{self}}}{{{key}}} = {{value}}"
  OneFile:
    methods:
      readText:
        extraArgs: [result]
        template: |-
          open my $fh, '<', {{fn}} or die "Can't open file $!";
          read $fh, my ${{result}}, -s $fh;
          close($fh);
  OneError:
    methods:
      raise: die {{message}}."\n"
  OneReflect:
    includes: [one]
    template: "OneReflect"
  OneBigInteger:
    includes: [bigint]
    methods:
      fromInt:
        template: "{{value}}"
  One:
    methods:
      langName: '"Perl"'
operators:
  OneString + OneString: "{{gen(left)}} . {{gen(right)}}"
  OneString <= OneCharacter: "{{gen(left)}} le {{gen(right)}}"
  OneCharacter <= OneString: "{{gen(left)}} le {{gen(right)}}"
  OneCharacter <= OneCharacter: "{{gen(left)}} le {{gen(right)}}"
  OneString >= OneCharacter: "{{gen(left)}} gt {{gen(right)}}"
  OneCharacter >= OneString: "{{gen(left)}} gt {{gen(right)}}"
  OneCharacter >= OneCharacter: "{{gen(left)}} gt {{gen(right)}}"
  OneString == OneString: "{{gen(left)}} eq {{gen(right)}}"
  OneString == OneCharacter: "{{gen(left)}} eq {{gen(right)}}"
  OneCharacter == OneString: "{{gen(left)}} eq {{gen(right)}}"
  OneCharacter == OneCharacter: "{{gen(left)}} eq {{gen(right)}}"
  OneString != OneString: "{{gen(left)}} ne {{gen(right)}}"
  any == null: "!defined {{gen(left)}}"
  any != null: "defined {{gen(left)}}"
  OneString + OneNumber: "{{gen(left)}} . {{gen(right)}}"
  OneString + OneBoolean: '{{gen(left)}} . (({{gen(right)}}) ? "true" : "false")'
  OneString + OneCharacter: "{{gen(left)}} . {{gen(right)}}"
  OneString += OneString: "{{gen(left)}} .= {{gen(right)}}"
  OneString += OneCharacter: "{{gen(left)}} .= {{gen(right)}}"
templates:
  testGenerator: |-
    package Program;

    eval {
        my $c = new {{class}}();
        $c->{{method}}();
    };
    if ($@) {
        print "Exception: " . $@
    }

  main: |-
    use strict;
    use warnings;

    {{for include in includes}}
      use {{include.name}};
    {{/for}}

    {{for enum in enums|sep=\n\n}}
      package {{enum.name}};

      use constant {      
          {{for item in enum.values}}
            {{item.name}} => '{{item.origName}}',
          {{/for}}
      };
    {{/for}}

    {{for class in classes|sep=\n\n}}
      package {{class.name}};

      {{if class.baseClass}}
        use parent -norequire, '{{class.baseClass}}';
      {{/if}}

      sub new
      {
          my $class = shift;
          my $self = {};
          bless $self, $class;
          {{if class.constructor}}
            my ( 
            {{for param in class.constructor.parameters|inline sep=", "}}
              {{genType(param.typeInfo)}}{{param.name}}
            {{/for}}
             ) = @_;
          {{/if}}
          {{for field in class.fields|sep=\n}}
            {{if field.static == false && field.initializer}}
              $self->{{{field.name}}} = {{gen(field.initializer)}};
            {{/if}}
          {{/for}}
          {{if class.constructor}}
            {{genBody(class.constructor.body)}}
          {{/if}}
          return $self;
      }

      {{for field in class.fields|sep=\n}}
        {{if field.static}}
          our ${{field.name}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}};
        {{/if}}
      {{/for}}

      {{for method in class.methods|sep=\n\n}}
        sub {{method.name}} {
            {{if method.static}}
              my ( 
              {{for param in method.parameters|inline sep=", "}}
                {{genType(param.typeInfo)}}{{param.name}}
              {{/for}}
               ) = @_;
            {{else}}
              my ( $self
              {{for param in method.parameters|inline}}
                , {{genType(param.typeInfo)}}{{param.name}}
              {{/for}}
               ) = @_;
            {{/if}}
            {{genBody(method.body)}}
        }
      {{/for}}

      {{if class.attributes["reflect"]}}
        OneReflect::setup_class(new OneClass("{{class.name}}", [
            {{for field in class.fields|sep=\n}}
              new OneField("{{field.name}}", {{if field.static}}1{{else}}0{{/if}}, "{{field.type}}"),
            {{/for}}
          ], [
            {{for method in class.methods|sep=\n}}
              new OneMethod("{{method.name}}", {{if method.static}}1{{else}}0{{/if}}, "{{method.returnType}}", [
                {{for param in method.parameters|sep=\n}}
                  new OneMethodArgument("{{param.name}}", "{{param.type}}"),
                {{/for}}
              ]),
            {{/for}}
          ]));
      {{/if}}
    {{/for}}

    {{genBody(mainBlock)}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia2}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.type}} {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "my {{varName(itemVar)}} = {{gen(itemVar.initializer)}}"

  genType:
    args: [{ name: type }]
    #template: "{{if type.isOneMap}}%{{else}}{{if type.isOneArray}}@{{else}}${{/if}}{{/if}}"
    template: "$"
  
  varName:
    args: [{ name: item }]
    template: "{{genType(item.type)}}{{item.outName}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}->{{gen(expr.propertyName)}}"
  identifier: "${{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  nullLiteral: "undef" # ???
  return: "return{{if expr.expression}} {{gen(expr.expression)}}{{/if}};"
  binary: |-
    {{if expr.left.valueType.isEnum and expr.operator == "=="}}
      {{gen(expr.left)}} eq {{gen(expr.right)}}
    {{else}}
      {{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}
    {{/if}}
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "throw {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}};"
  new: "new {{gen(expr.cls)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.outName}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}->{{expr.enumMemberRef.outName}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep="\n"}}
        {{prop.name}} => {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}->{{expr.methodRef.outName}}"
  staticMethod: "{{expr.methodRef.classRef.outName}}::{{expr.methodRef.outName}}"
  localVar: "{{varName(expr.varRef)}}"
  methodArgument: "{{varName(expr.varRef)}}"
  instanceField: "{{gen(expr.thisExpr)}}->{{{expr.varRef.outName}}}"
  staticField: "${{gen(expr.thisExpr)}}::{{expr.varRef.outName}}"
  trueLiteral: "1"
  falseLiteral: "0"
  elementAccess: "{{gen(expr.object, true)}}{{{gen(expr.elementExpr)}}}"
  thisReference: $self
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: last;
  templateString: |-
    "
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{escapeQuotes(part.text)}}
      {{else}}
        {{if part.expr.valueType.isBoolean|inline}}
          @{[({{gen(part.expr)}}) ? 'true' : 'false']}
        {{else}}
          @{[{{escapeQuotes(gen(part.expr))}}]}
        {{/if}}
      {{/if}}
    {{/for}}
    "
  foreach: |-
    foreach my {{varName(expr.itemVariable)}} (@{{{gen(expr.items)}}}) {
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  while: |-
    while ({{gen(expr.condition)}}) {
        {{genBody(expr.body)}}
    }
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        els{{genBody(expr.else)}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
